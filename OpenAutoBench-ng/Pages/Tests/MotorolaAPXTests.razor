@page "/test/motorola/apx"
@using OpenAutoBench_ng.Communication.Radio.Motorola.APX
@using OpenAutoBench_ng.Communication.Radio.Motorola.Quantar
@using OpenAutoBench_ng.Communication.Radio
@using OpenAutoBench_ng.Communication.Instrument
@using OpenAutoBench_ng.Communication.Radio.Motorola.XCMPRadioBase
@using OpenAutoBench_ng.OpenAutoBench
@using System.IO.Ports
@inject Microsoft.JSInterop.IJSRuntime JS

<PageTitle>APX</PageTitle>

<div class="d-flex flex-column h-100">

    <h3 class="p-2">Motorola APX</h3>

    <div class="d-flex flex-row w-100">
        <!-- Main Test Checkboxes -->
        <div class="p-2">
            <h5>Tests to Run</h5>
            <input type="checkbox" @bind="testParams.doRefoscTest" /> Tx: Reference Oscillator
            <br />
            <input type="checkbox" @bind="testParams.doPowerTest" /> Tx: Power
            <br />
            <input type="checkbox" @bind="testParams.doDeviationTest" /> Tx: Deviation Balance
            <br />
            <input type="checkbox" @bind="testParams.doTxBer" /> Tx: BER
            <br />
            <input type="checkbox" @bind="testParams.doRssiTest" /> Rx: RSSI
            <br />
            <input type="checkbox" @bind="testParams.doRxBer" /> Rx: BER
            <br />
        </div>
        <!-- Extended Text Checkboxes -->
        <div class="p-2" hidden="@(!settings.EnableExtendedFreqTest)">
            <h5>Extended Tests</h5>
            <input type="checkbox" @bind="testParams.doTxExtendedTest" /> Tx: Extended Freq Test
            <br />
            <input type="checkbox" @bind="testParams.doRxExtendedTest" /> Rx: Extended Freq Test
            <br />
            <input type="text" @bind="testParams.ExtendedTestStart" /> Extended Freq Test Start (hz)
            <br />
            <input type="text" @bind="testParams.ExtendedTestEnd" /> Extended Freq Test End (hz)
            <br />
            <input type="text" @bind="testParams.ExtendedTestStep" /> Extended Freq Test Step (hz)
        </div>
        <!-- Test Comments -->
        <div class="p-2 flex-grow-1">
            <h5>Test Report Comments</h5>
            <textarea class="form-control" @bind="report.Comments" rows="4"></textarea>
        </div>
    </div>

    <!-- Test Buttons -->
    <div class="p-2">
        <button class="btn @(alignInProgress ? "btn-danger" : "btn-primary")" @onclick="@OnAlignButton" disabled=@(ctSource.IsCancellationRequested || testInProgress) >@(alignInProgress ? "Cancel Align" : "Begin Alignment")</button>

        <button class="btn @(testInProgress ? "btn-danger" : "btn-success")" @onclick="@OnTestButton" disabled=@(ctSource.IsCancellationRequested || alignInProgress) >@(testInProgress ? "Cancel Test" : "Begin Test")</button>

        <button class="btn btn-secondary" @onclick="@SavePDF" disabled=@(!report.IsFinished) >Save PDF</button>
    </div>

    <!-- Test Output -->
    <div class="p-2 flex-grow-1 overflow-auto">
        <div class="bg-secondary-subtle p-3 h-100 overflow-auto" id="test-output">
            <pre><code>@((MarkupString)TestOutput)</code></pre>
        </div>
    </div>

</div>

<script>
    var testOutput = document.getElementById("test-output");

    // Callback to monitor the code text box for auto-scroll
    function scrollCallback(mutationList, observer) {
        for (const mutation of mutationList)
        {
            if (mutation.type === "childList")
            {
                testOutput.scrollTop = testOutput.scrollHeight;
            }
        }
    }

    // Create observer
    const config = { attributes: false, childList: true, subtree: true };
    var observer = new MutationObserver(scrollCallback);
    observer.observe(testOutput, config)
</script>

@code {
    private string TestOutput = "Test output goes here...\n";
    private bool Connected = false;
    private string[] ports;
    public XCMPRadioTestParams testParams = new XCMPRadioTestParams();
    IBaseInstrument instrument = null;
    MotorolaAPX radio = null;
    private Preferences prefs = new Preferences();
    private Settings settings;

    private TestReport report = new TestReport(ReportType.TEST);

    // Token to cancel a test in progress
    private bool testInProgress = false;
    private bool alignInProgress = false;
    private CancellationTokenSource ctSource = new CancellationTokenSource();

    private async Task Connect()
    {
        try
        {
            updateOutput("Connecting to test set...");
            instrument = await MainLogic.CreateInstrument();
            await Task.Delay(500, ctSource.Token);
            updateOutput($"Connected to {instrument.Manufacturer} {instrument.Model} (S/N {instrument.Serial}, V {instrument.Version})");
        }
        catch (Exception e)
        {
            updateOutput("Connection to test set failed: " + e.ToString());
            throw new Exception("Connection to test set failed");
        }

        try
        {
            updateOutput("Connecting to radio...");
            XCMPIPConnection conn = new XCMPIPConnection("192.168.128.1", 8002);
            radio = new MotorolaAPX(conn);
            radio.Connect();
            await Task.Delay(500, ctSource.Token);
            radio.GetStatus(MotorolaXCMPRadioBase.StatusOperation.SerialNumber);
            radio.GetStatus(MotorolaXCMPRadioBase.StatusOperation.ModelNumber);
            updateOutput($"Connected to Motorola {radio.ModelNumber} (S/N {radio.SerialNumber})");
        }
        catch (Exception e)
        {
            updateOutput("Connection to radio failed: " + e.ToString());
            throw new Exception("Connection to radio failed");
        }

        // allows tests to be run
        Connected = true;
    }

    private async Task OnConnect(MouseEventArgs mouseEventArgs)
    {
        clearOutput();

        await Connect();

        await Task.Delay(1000);

        await instrument?.Disconnect();

        radio?.Disconnect();
    }

    private async Task OnAlignButton(MouseEventArgs mouseEventArgs)
    {
        // Cancel if alignment is running
        if (alignInProgress)
        {
            if (!ctSource.IsCancellationRequested)
            {
                ctSource.Cancel();
            }
        }
        // Do nothing if test is running
        else if (testInProgress)
        {
            return;
        }
        // Start a new alignment
        else
        {
            alignInProgress = true;

            clearOutput();

            try
            {
                await Connect();

                report = new TestReport(ReportType.ALIGNMENT);
                report.Start(instrument, radio);

                ctSource.Token.ThrowIfCancellationRequested();

                updateOutput("Beginning alignment at " + report.StartTime.ToString("HH:mm:ss tt"));
                updateOutput("=====================================");
                updateOutput("");

                // Setup test parameters
                testParams.instrument = instrument;
                testParams.callback = updateOutput;
                testParams.radio = radio;
                testParams.ct = ctSource.Token;
                testParams.report = report;

                ctSource.Token.ThrowIfCancellationRequested();

                radio.EnterServiceMode();

                await radio.PerformAlignments(testParams);
            }
            catch (OperationCanceledException e)
            {
                updateOutput("Alignment cancelled, closing connections");
            }
            catch (UnauthorizedAccessException e)
            {
                updateOutput($"Unable to access port! {e.ToString()}");
            }
            catch (Exception e)
            {
                updateOutput(String.Format("Error when aligning: {0}", e.ToString()));
            }
            finally
            {
                radio?.ResetRadio();
                radio?.Disconnect();
                await (instrument?.Disconnect() ?? Task.CompletedTask);
                Connected = false;
            }

            report.End();

            updateOutput("Completed alignment at " + report.EndTime.ToString("HH:mm:ss tt"));
            updateOutput("Done in " + report.Duration.ToString(@"hh\:mm\:ss"));

            updateOutput("");

            updateOutput(report.GenerateTestReportString());

            testInProgress = false;
            // Recreate ct source to clear the cancel request
            ctSource = new CancellationTokenSource();

            alignInProgress = false;
        }
    }

    private async Task OnTestButton(MouseEventArgs mouseEventArgs)
    {
        // Cancel if test running
        if (testInProgress)
        {
            if (!ctSource.IsCancellationRequested)
            {
                ctSource.Cancel();
            }
        }
        // Do nothing if alignment is running
        else if (alignInProgress)
        {
            return;
        }
        // Start a new test
        else
        {
            testInProgress = true;

            clearOutput();

            try
            {
                await Connect();

                report = new TestReport(ReportType.TEST);
                report.Start(instrument, radio);

                ctSource.Token.ThrowIfCancellationRequested();

                updateOutput("Beginning tests at " + report.StartTime.ToString("HH:mm:ss tt"));
                updateOutput("=====================================");
                updateOutput("");

                // Setup test parameters
                testParams.instrument = instrument;
                testParams.callback = updateOutput;
                testParams.radio = radio;
                testParams.ct = ctSource.Token;
                testParams.report = report;

                ctSource.Token.ThrowIfCancellationRequested();

                radio.EnterServiceMode();

                await radio.PerformTests(testParams);
            }
            catch (OperationCanceledException e)
            {
                updateOutput("Test cancelled, closing connections");
            }
            catch (UnauthorizedAccessException e)
            {
                updateOutput($"Unable to access port! {e.ToString()}");
            }
            catch (Exception e)
            {
                updateOutput(String.Format("Error when testing: {0}", e.ToString()));
            }
            finally
            {
                radio?.ResetRadio();
                radio?.Disconnect();
                await (instrument?.Disconnect() ?? Task.CompletedTask);
                Connected = false;
            }

            report?.End();

            updateOutput("Completed tests at " + report?.EndTime.ToString("HH:mm:ss tt"));
            updateOutput("Done in " + report.Duration.ToString(@"hh\:mm\:ss"));

            updateOutput("");
            updateOutput(report.GenerateTestReportString());

            testInProgress = false;
            // Recreate ct source to clear the cancel request
            ctSource = new CancellationTokenSource();
        }
    }

    public void updateOutput(string line)
    {
        TestOutput += line + "<br>";
        InvokeAsync(StateHasChanged);
    }

    public void clearOutput()
    {
        TestOutput = "";
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        ports = SerialPort.GetPortNames();
        settings = prefs.Load();
    }

    private async Task SavePDF()
    {
        using (MemoryStream excelStream = new MemoryStream())
        {
            report.GeneratePDFReport().Save(excelStream, false);
            string fileName = $"OAB-NG Report - {radio?.Name} {radio?.SerialNumber}.pdf";
            await JS.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(excelStream.ToArray()));
        }
    }
}
